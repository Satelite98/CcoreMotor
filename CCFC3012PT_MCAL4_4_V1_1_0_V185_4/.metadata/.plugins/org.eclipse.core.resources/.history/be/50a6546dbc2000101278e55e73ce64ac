//############################################################
// FILE: Res_SoftAngleCalc.c
//############################################################

#include "Res_SoftAngleCalc.h"


__attribute__ ((section (".cpu0_dtcm_data"))) extern signed int exe_data_buf_a[32];
__attribute__ ((section (".cpu0_dtcm_data"))) extern signed int sin_data_buf_a[32];
__attribute__ ((section (".cpu0_dtcm_data"))) extern signed int cos_data_buf_a[32];


ResXB  ResXBPare_a = ResXB_DEFAULTS;   // 鍒濆鍖栧弬鏁�
ResXB  ResXBPare_b = ResXB_DEFAULTS;   // 鍒濆鍖栧弬鏁�

void  Res_PWMCalcInit(void)
{   //鐢垫満浣嶇疆闆朵綅鍋忚鍙婂叾鏍囧畾
	// https://wenku.baidu.com/view/4b678e6e322b3169a45177232f60ddccda38e6b2.html?_wkts_=1684768034543&bdQuery=%E7%94%B5%E6%9C%BA%E9%9B%B6%E4%BD%8D%E5%88%9D%E5%A7%8B%E8%A7%92%E5%BA%A6
//	ResXBPare.init_Angle=3120;  // 鐢垫満闆朵綅鍒濆瑙掑害
}

//提取DSADC中断时刻的正余弦包络数据
void Res_Dsadcupdate(IfxDsadc_Rdc *handle, sint32 *sin_data, sint32 *cos_data)
{
	volatile sint32 sin = 0;
	volatile sint32 cos = 0;
	volatile int32_t delta = 0;
	sint32 sin8 = sin_data[8];
	sint32 cos8 = cos_data[8];
	sint32 start_point = 0;
	sint32 end_point = 16;
	uint8 i = 0;

    if(sin8*sin8 > cos8*cos8)
    {
    	if(sin8 < 0)
    	{
    		for(i = 8; i < 24; i++)
    		{
    			if(sin_data[i] > 0)
    			{
    				start_point = i - 16;
    				end_point = start_point + 16;
    				break;
    			}
    		}
    	}
    	else
    	{
    		for(i = 8; i < 24; i++)
    		{
    			if(sin_data[i] < 0)
    			{
    				start_point = i - 16;
    				end_point = start_point + 16;
    				break;
    			}
    		}
    	}
    }
    else
    {
    	if(cos8 < 0)
    	{
    		for(i = 8; i < 24; i++)
    		{
    			if(cos_data[i] > 0)
    			{
    				start_point = i - 16;
    				break;
    			}
    		}
    	}
    	else
    	{
    		for(i = 8; i < 24; i++)
    		{
    			if(cos_data[i] < 0)
    			{
    				start_point = i - 16;
    				break;
    			}
    		}
    	}
    }

    for(i = 0; i < 32; i++)
    {
    	if(i < start_point)
    	{
    		sin -= sin_data[i];
    		cos -= cos_data[i];
    	}
    	else if(i < end_point)
    	{
    		sin += sin_data[i];
    		cos += cos_data[i];
    	}
    	else
    	{
    		sin -= sin_data[i];
    		cos -= cos_data[i];
    	}
    }

    //记录DSADC 96us周期中断，当前旋变sincos采样值
	handle->sinIn = sin;
	handle->cosIn = cos;
	// 提取DSADC中断时间戳
    handle->timestamp.rdc = handle->hardware.rdcTimCh->GPR0.B.GPR0;
}

//  Atan与角度计算和PLL
void  Res_PWMupdateCalc(IfxDsadc_Rdc *handle, ResXB *ResXBPare)
{
    float32 TimeDelayAngle = 0.0F;

    ResXBPare->speedEst=handle->angleTrk.speedEstB;
    //时间戳补偿计算
//    TimeDelayAngle = (handle->grpDelay+IfxDsadc_Rdc_getTimeStamp(handle)) *  ResXBPare->speedEst;
    // expand to 32-bit data
    ResXBPare->Ressin =handle->sinIn;
    ResXBPare->Rescos =handle->cosIn;
    // angleErr角度偏差进行PLL运算 KP  KI
	AngleTrk_step(&(handle->angleTrk),   ResXBPare->Ressin, ResXBPare->Rescos, TimeDelayAngle);

	// sin^2+cos^2  检测最大最小阈值判断 和角度误差
	AngleTrk_updateStatus(&(handle->angleTrk), ResXBPare->Ressin,  ResXBPare->Rescos);
	 ResXBPare->Res_sincos2 =handle->angleTrk.cfg.sincos2;
	 ResXBPare->Res_Fault = handle->angleTrk.cfg.ResErr;

	 ResXBPare->Res_angle = handle->angleTrk.angleEst*AD2SXB_12Bit/(2*3.1415926F);
    // 鏃嬪彉瑙掑害涓庣數鏈虹數瑙掑害杞崲
	 ResXBPare->PM_angle =(uint16)( ResXBPare->Res_angle*Poles_Ratio_Coeff - ResXBPare->init_Angle)&(AD2SXB_12Bit);
	// 閫熷害璁＄畻涓庢护娉�
	 ResXBPare->AD2S_SpdRPM = (int16)( ResXBPare->speedEst*60.0F/(Motor_Poles*2*3.1415926F));  // 鐢垫満鏋佸鏁板拰鏃嬪彉鏋佸鏁扮殑绯绘暟璁＄畻    AD2SXBPare.AD2S_Spd*60*1000/2048/3  3= 鏃嬭浆鍙樺帇鍣ㄦ瀬瀵规暟
	 ResXBPare->AD2S_SpdRPMH =  ResXBPare->AD2S_SpdRPMH*GM_Low_Lass_A +  ResXBPare->AD2S_SpdRPM * GM_Low_Lass_B;  // 杞�熶竴闃朵綆閫氭护娉�
	 ResXBPare->Abs_SpdRPM = Abs( ResXBPare->AD2S_SpdRPMH);
}

//===========================================================================
// No more.
//===========================================================================
